{"version":3,"sources":["components/Header.tsx","constants/paths.ts","components/ProbalityItem.tsx","helpers/store-provider.ts","helpers/use-store.ts","helpers/calcMath.ts","containers/First/FistExInput.tsx","components/MicroVisualComponents.tsx","containers/First/VisuliseData.tsx","App.tsx","serviceWorker.ts","store/ProbItem.ts","index.tsx","store/ProbList.ts"],"names":["MyPageHeader","ghost","title","extra","key","to","ProbalityItemComponent","probItem","myStyle","deleteProb","useState","X","getProbPair","P","pItem","setPItem","editable","setEditable","Text","Typography","className","gutter","align","value","onChange","disabled","max","min","step","type","onClick","editPropPair","shape","icon","CheckOutlined","EditOutlined","danger","DeleteOutlined","StoreContext","createContext","StoreProvider","Provider","useStore","useContext","calcMathWait","arrProbalities","reduce","accumulator","currentValue","normalizeCondition","calcRespFunc","result","reducer","i","length","console","log","slice","push","createDataFunc","funcResp","x","y","forEach","elem","index","factorial","n","combinations","k","FirstExInput","Title","Panel","Collapse","probList","addProbality","addProb","useObserver","defaultActiveKey","header","PlusOutlined","list","map","removeProb","allProballities","OutFuncRas","arrayOfNums","Paragraph","arrayOfResults","FirstExResult","mnData","labels","allX","datasets","label","fill","lineTension","backgroundColor","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","data","allP","showLine","columns","dataIndex","dataSource","checkDuplicates","span","toFixed","calcMathWaitsqr","height","App","path","Boolean","window","location","hostname","match","ProbItem","id","Date","now","this","probPair","observable","action","computed","shallow","probItems","sort","a","b","tempArr","isDuplicate","find","prob","Probitem","splice","m","M","N","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.d308772b.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { PageHeader, Button } from 'antd';\r\nimport { Link } from \"react-router-dom\";\r\nimport {firstExInputPath} from \"../constants/paths\";\r\n\r\nexport const MyPageHeader = () => {\r\n    return (\r\n        <PageHeader\r\n            ghost={false}\r\n            title=\"Лабораторная работа №4\"\r\n            extra={[\r\n                <Link key=\"1\" to={firstExInputPath}>\r\n                    <Button>Лаборатоная работа №4</Button>\r\n                </Link>]}\r\n        />\r\n    )\r\n}\r\n","export const firstExInputPath:string = '/'\r\nexport const firstExCalcPath:string = '/resultFirst'\r\nexport const secondExInputPath:string = '/second'\r\nexport const secondExCalcPath:string = '/resultSecond'\r\n","import {Button, InputNumber, Tooltip, Typography, Row, Col} from \"antd\";\r\nimport React, {useState} from \"react\";\r\nimport {ProbabilityItem} from \"../constants/interfaces\";\r\nimport ProbItem from \"../store/ProbItem\";\r\nimport { CheckOutlined, EditOutlined, DeleteOutlined } from \"@ant-design/icons\";\r\n\r\ninterface ProbalityItemComponentProps {\r\n    probItem: ProbItem,\r\n    myStyle: string,\r\n    deleteProb: Function\r\n}\r\nexport const ProbalityItemComponent = ({probItem, myStyle, deleteProb}: ProbalityItemComponentProps) => {\r\n    const [pItem, setPItem] = useState<ProbabilityItem>({X: probItem.getProbPair.X, P: probItem.getProbPair.P});\r\n    const [editable, setEditable] = useState<boolean>(true)\r\n    const {Text} = Typography;\r\n    const xChange = (value:any) =>{\r\n        setPItem({...pItem, X:value})\r\n    }\r\n\r\n    const pChange = (value:any) =>{\r\n        setPItem({...pItem, P:value})\r\n    }\r\n\r\n    const saveProbality = () => {\r\n        setEditable(false)\r\n        probItem.editPropPair(pItem.X, pItem.P)\r\n    }\r\n\r\n    return(\r\n        <div className={myStyle}>\r\n            <Row gutter={[8, 8]} align=\"middle\">\r\n                <Col>\r\n                    <Text>Координата X:</Text>\r\n                </Col>\r\n                <Col>\r\n                    <InputNumber value={pItem.X} onChange={xChange} disabled={!editable}/>\r\n                </Col>\r\n                <Col>\r\n                    <Text>Вероятность:</Text>\r\n                </Col>\r\n                <Col>\r\n                    <InputNumber max={1} min={0} value={pItem.P} step={0.1} onChange={pChange} disabled={!editable}/>\r\n                </Col>\r\n                {editable ? <Col><Tooltip title=\"Сохранить\">\r\n                        <Button type=\"primary\" onClick={saveProbality} shape=\"circle\" icon={<CheckOutlined/>}/>\r\n                    </Tooltip></Col>\r\n                    : <><Col>\r\n                        <Tooltip title=\"Редактировать\">\r\n                            <Button type=\"primary\" onClick={() => setEditable(true)} shape=\"circle\"\r\n                                    icon={<EditOutlined/>}/>\r\n                        </Tooltip>\r\n                    </Col>\r\n                        <Col>\r\n                            <Tooltip title=\"Удалить\">\r\n                                <Button type=\"primary\" onClick={() => deleteProb()} danger shape=\"circle\"\r\n                                        icon={<DeleteOutlined/>}/>\r\n                            </Tooltip>\r\n                        </Col></>}\r\n            </Row>\r\n        </div>\r\n    )\r\n}","import { createContext } from \"react\";\r\nimport {ProbList} from '../store/ProbList'\r\n\r\n\r\nexport const StoreContext = createContext<ProbList>({} as ProbList);\r\nexport const StoreProvider = StoreContext.Provider;","import {ProbList} from '../store/ProbList'\r\nimport { useContext } from \"react\";\r\nimport { StoreContext } from \"./store-provider\";\r\n\r\nexport const useStore = (): ProbList => useContext(StoreContext);","import {geometryData, Point, ProbabilityItem} from \"../constants/interfaces\";\r\n\r\nexport function calcMathWait (arrProbalities:Array<ProbabilityItem>):number {\r\n    function reducer (accumulator:number, currentValue:ProbabilityItem):number{\r\n        return accumulator + currentValue.X * currentValue.P\r\n    }\r\n    return arrProbalities.reduce(reducer, 0);\r\n}\r\n\r\nfunction calcMathWaitsqr(arrProbalities:Array<ProbabilityItem>):number {\r\n    function reducer (accumulator:number, currentValue:ProbabilityItem):number{\r\n        return accumulator + currentValue.X * currentValue.X * currentValue.P\r\n    }\r\n    return arrProbalities.reduce(reducer, 0);\r\n}\r\n\r\nexport function calcMathDispertion(arrProbalities:Array<ProbabilityItem>):number{\r\n    return calcMathWaitsqr(arrProbalities) - calcMathWait(arrProbalities)*calcMathWait(arrProbalities);\r\n}\r\n\r\nexport function normalizeCondition(arrProbalities:Array<ProbabilityItem>):number {\r\n    function reducer (accumulator:number, currentValue:ProbabilityItem):number{\r\n        return accumulator +  currentValue.P\r\n    }\r\n    return arrProbalities.reduce(reducer,0)\r\n}\r\n\r\nexport function calcRespFunc(arrProbalities:Array<ProbabilityItem>):Array<number> {\r\n   let result:Array<number> = []\r\n    function reducer (accumulator:number, currentValue:ProbabilityItem):number{\r\n        return accumulator + currentValue.P\r\n    }\r\n    for(let i:number = 0; i < arrProbalities.length; i++){\r\n        console.log(arrProbalities.slice(0, i+1).reduce(reducer,0))\r\n        result.push(arrProbalities.slice(0, i+1).reduce(reducer,0))\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function createDataFunc(arrProbalities:Array<ProbabilityItem>):Point[] {\r\n    let funcResp:number[] = calcRespFunc(arrProbalities)\r\n    let result:Point[] = [];\r\n    result.push({x:0,y:0})\r\n    funcResp.forEach((elem, index) =>{\r\n        if(index === 0){\r\n            result.push({x: arrProbalities[index].X, y:0})\r\n            if (arrProbalities.length > 1)\r\n                result.push({x: arrProbalities[index+1].X, y:0})\r\n        }\r\n        else if(index === arrProbalities.length-1) {\r\n            result.push({x: arrProbalities[index].X, y: 1})\r\n            result.push({x: arrProbalities[index].X + 3, y: 1})\r\n        }\r\n        else {\r\n            result.push({x: arrProbalities[index].X, y:elem})\r\n            result.push({x: arrProbalities[index+1].X, y:elem})\r\n        }\r\n    })\r\n\r\n    if (arrProbalities.length === 1){\r\n        result.push({x: arrProbalities[0].X, y: 1})\r\n        result.push({x: arrProbalities[0].X + 3, y: 1})\r\n    }\r\n\r\n    return result\r\n}\r\n\r\nfunction factorial(n:number):number {\r\n    if(n === 0)\r\n        return  1\r\n    let result = n\r\n    for(let i:number = n - 1; i > 0; i++)\r\n        result *= i\r\n    return  result\r\n}\r\n\r\nexport function combinations(n:number, k:number):number {return (factorial(n))/(factorial(n-k)*factorial(k))}\r\n\r\n\r\nexport function dataSequence(data:geometryData):ProbabilityItem[] {\r\n    let result:ProbabilityItem[] = []\r\n\r\n    for(let i:number = data.m; i < data.n; i++) {\r\n        result.push({X:i, P:(combinations(i, data.M) * combinations(data.n - i, data.N - data.M)) / combinations(data.n, data.N)\r\n    })\r\n    }\r\n    return result\r\n}","import React from \"react\";\r\nimport {Button, Collapse, Divider, Tooltip, Typography, Row, Col} from 'antd';\r\nimport { PlusOutlined } from '@ant-design/icons';\r\nimport \"./firstexinput.css\"\r\nimport {ProbalityItemComponent} from \"../../components/ProbalityItem\";\r\nimport {useObserver} from \"mobx-react-lite\";\r\nimport {useStore} from \"../../helpers/use-store\";\r\nimport {Link} from \"react-router-dom\";\r\nimport {firstExCalcPath} from \"../../constants/paths\";\r\nimport {normalizeCondition} from \"../../helpers/calcMath\";\r\n\r\n\r\n\r\nexport const FirstExInput = () => {\r\n    const { Title, Text } = Typography;\r\n    const {Panel} = Collapse\r\n    let probList = useStore();\r\n    const addProbality = () => {\r\n        probList.addProb({X:0, P:0})\r\n    }\r\n\r\n\r\n\r\n    return useObserver ( () => (\r\n            <div className={\"containerStyle\"}>\r\n                <Title>Введите данные для рассчета</Title>\r\n                <Divider/>\r\n                <Collapse defaultActiveKey={['1']}>\r\n                    <Panel header={\"Задание 1\"} key={'1'}>\r\n                        <Row gutter={[8, 8]} align=\"middle\">\r\n                            <Col>\r\n                                <Text>Введите количество экспериментов</Text>\r\n                            </Col>\r\n                            <Col>\r\n                                <Tooltip title=\"Добавить эксперимент\">\r\n                                    <Button type=\"primary\" shape=\"circle\" icon={<PlusOutlined/>}\r\n                                            onClick={addProbality}/>\r\n                                </Tooltip>\r\n                            </Col>\r\n                        </Row>\r\n                        <Divider/>\r\n                        {probList.list.map((elem, index) => (\r\n                            <ProbalityItemComponent\r\n                                probItem={elem}\r\n                                myStyle={\"constainerProbalities_item\"}\r\n                                deleteProb={() => {\r\n                                    probList.removeProb(index)\r\n                                }}\r\n                            />\r\n                        ))}\r\n                        {normalizeCondition(probList.allProballities) !== 1 ?\r\n                            <div>\r\n                                <Text>{`Условие нормировки не выполнено! До его выполнения осталось ${1 - normalizeCondition(probList.allProballities)}`}</Text>\r\n                            </div> :\r\n                            <Link to={firstExCalcPath}>\r\n                                <Button type={\"link\"}>Рассчитать значения</Button>\r\n                            </Link>}\r\n                    </Panel>\r\n                </Collapse>\r\n            </div>\r\n       ))\r\n}","import React from \"react\";\r\nimport {ProbabilityItem} from \"../constants/interfaces\";\r\nimport {Typography} from \"antd\";\r\nimport {calcRespFunc} from \"../helpers/calcMath\";\r\n\r\ninterface outFuncRas{\r\n    arrayOfNums: Array<ProbabilityItem>\r\n}\r\n\r\nexport const OutFuncRas = ({arrayOfNums}:outFuncRas) => {\r\n    const {Paragraph} = Typography\r\n    let arrayOfResults:Array<number> = calcRespFunc(arrayOfNums);\r\n\r\n    return(\r\n        <div>\r\n            {arrayOfResults.map((elem, index) => (\r\n                <div key={elem}>\r\n                {index === 0? <Paragraph>{`0, при x≤${arrayOfNums[index].X}`}</Paragraph>:''}\r\n                {index > 0 && index !== arrayOfResults.length - 1? <Paragraph>{`${elem}, ${arrayOfNums[index - 1].X} < x ≤ ${arrayOfNums[index].X}`}</Paragraph>:''}\r\n                {index === arrayOfResults.length - 1? <Paragraph>{`1, при x > ${arrayOfNums[index].X}`}</Paragraph>:''}\r\n                </div>\r\n            ))}\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport {useObserver} from \"mobx-react-lite\";\r\nimport {useStore} from \"../../helpers/use-store\";\r\nimport {Card, Divider, Table, Typography, Row, Col, Button} from \"antd\";\r\nimport {Line, Scatter} from 'react-chartjs-2';\r\nimport './firstexinput.css'\r\nimport {calcMathDispertion, calcMathWait, createDataFunc, normalizeCondition} from \"../../helpers/calcMath\";\r\nimport {OutFuncRas} from \"../../components/MicroVisualComponents\";\r\nimport {Link} from \"react-router-dom\";\r\nimport {firstExInputPath} from \"../../constants/paths\";\r\n\r\n\r\nexport const FirstExResult = () => {\r\n    const probList = useStore()\r\n    const mnData = {\r\n        labels: probList.allX,\r\n        datasets: [\r\n            {\r\n                label: 'Многоугольник распределения',\r\n                fill: false,\r\n                lineTension: 0.1,\r\n                backgroundColor: 'rgba(75,192,192,0.4)',\r\n                borderColor: 'rgba(75,192,192,1)',\r\n                borderCapStyle: 'butt',\r\n                borderDash: [],\r\n                borderDashOffset: 0.0,\r\n                borderJoinStyle: 'miter',\r\n                pointBorderColor: 'rgba(75,192,192,1)',\r\n                pointBackgroundColor: '#fff',\r\n                pointBorderWidth: 1,\r\n                pointHoverRadius: 5,\r\n                pointHoverBackgroundColor: 'rgba(75,192,192,1)',\r\n                pointHoverBorderColor: '#fff',\r\n                pointHoverBorderWidth: 2,\r\n                pointRadius: 1,\r\n                pointHitRadius: 10,\r\n                data: probList.allP\r\n            }\r\n        ]\r\n    };\r\n    const data = {\r\n        labels: [\r\n            \"Scatter\"\r\n        ],\r\n            datasets: [\r\n            {\r\n                label: \"Функция распределения\",\r\n                fill: false,\r\n                showLine: true,\r\n                lineTension: 0.1,\r\n                borderColor: 'rgb(93,192,75)',\r\n                backgroundColor: \"#FFF\",\r\n                pointBorderColor: \"#FFF\",\r\n                pointBackgroundColor: \"#FFF\",\r\n                pointBorderWidth: 1,\r\n                pointHoverRadius: 6,\r\n                pointHoverBackgroundColor: \"#FFF\",\r\n                pointHoverBorderColor: \"rgb(93,192,75)\",\r\n                pointHoverBorderWidth: 2,\r\n                pointRadius: 1,\r\n                pointHitRadius: 3,\r\n                data: createDataFunc(probList.allProballities),\r\n            }\r\n        ]\r\n    };\r\n    const {Title, Text, Paragraph} = Typography;\r\n    const columns = [{\r\n            title:'X',\r\n            dataIndex:'X',\r\n            key: 'id'\r\n        },{\r\n            title:'P',\r\n            dataIndex:'P',\r\n            key: 'id'\r\n        }]\r\n\r\n    return useObserver(() =>(\r\n        <div className={\"containerStyle\"}>\r\n            <Title>Рассчет первого задания.</Title>\r\n            <Card title={\"Значения экспериментов\"} className={\"firstExResult_card\"}>\r\n                <Table dataSource={probList.allProballities} columns={columns}/>\r\n                <Divider/>\r\n                <Paragraph>Условие нормировки:</Paragraph>\r\n                <Text>{`Σpi = ${normalizeCondition(probList.allProballities)}`}</Text>\r\n                {normalizeCondition(probList.allProballities) !== 1?\r\n                <div>\r\n                    <Text>Условие нормировки не выполнено! Введите другие значения!</Text>\r\n                    <Link to={firstExInputPath}>\r\n                        <Button type={\"link\"}>Исправить значения</Button>\r\n                    </Link>\r\n                </div>:''}\r\n                {probList.checkDuplicates?\r\n                    <div>\r\n                        <Text>Обнаружены дупликаты координат!</Text>\r\n                        <Link to={firstExInputPath}>\r\n                            <Button type={\"link\"}>Исправить значения</Button>\r\n                        </Link>\r\n                    </div>:''}\r\n            </Card>\r\n            {normalizeCondition(probList.allProballities) === 1 || probList.checkDuplicates?\r\n                <>\r\n                    <Row gutter={[8, 8]}>\r\n                        <Col span={8}>\r\n                            <Card title={\"Функция распределения\"}>\r\n                                <Text>F(x) = </Text>\r\n                                <OutFuncRas arrayOfNums={probList.allProballities}/>\r\n                            </Card>\r\n                        </Col>\r\n                        <Col span={8}>\r\n                            <Card title={\"Математическое ожидание\"}>\r\n                                <Text>{`M(x) = Σpi * xi = ${calcMathWait(probList.allProballities).toFixed(4)}`}</Text>\r\n                            </Card>\r\n                        </Col>\r\n                        <Col span={7}>\r\n                            <Card title={\"Дисперсия\"}>\r\n                                <Text>{`D(x) = M(X^2) - M(X)^2 = ${calcMathDispertion(probList.allProballities).toFixed(4)}`}</Text>\r\n                            </Card>\r\n                        </Col>\r\n                    </Row>\r\n                    <Card title={\"Функция распределения\"} className={\"firstExResult_card_graph\"}>\r\n                        <Scatter data={data} height={100}/>\r\n                    </Card>\r\n                    <Card title={\"Многоугольник распределения\"} className={\"firstExResult_card_graph\"}>\r\n                        <Line  data={mnData} height={100}/>\r\n                    </Card>\r\n                </>:''}\r\n        </div>\r\n    ))\r\n}","import React from 'react';\nimport 'antd/dist/antd.css';\nimport {Layout} from 'antd';\nimport {MyPageHeader} from \"./components/Header\";\nimport {\n    HashRouter as Router,\n    Switch,\n    Route\n} from \"react-router-dom\";\nimport {FirstExInput} from './containers/First/FistExInput'\nimport \"./App.css\"\nimport {firstExCalcPath, firstExInputPath} from \"./constants/paths\";\nimport {FirstExResult} from \"./containers/First/VisuliseData\";\n\nfunction App() {\n  return (\n      <Layout className={\"appLayout\"}>\n        <Router>\n            <MyPageHeader/>\n            <Switch>\n                <Route path={firstExCalcPath}>\n                    <FirstExResult/>\n                </Route>\n                <Route path={firstExInputPath}>\n                    <FirstExInput/>\n                </Route>\n            </Switch>\n        </Router>\n      </Layout>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { observable, action, computed } from \"mobx\";\r\nimport {ProbabilityItem} from \"../constants/interfaces\";\r\n\r\n\r\nexport default class ProbItem{\r\n    id = Date.now();\r\n\r\n    @observable probPair: ProbabilityItem = {X: 0, P: 0};\r\n\r\n    constructor(X:number, P:number){\r\n        this.probPair = {X: X, P: P};\r\n    }\r\n\r\n    @action\r\n    editPropPair = (X: number, P:number) =>{\r\n        this.probPair = {X: X, P: P};\r\n    }\r\n\r\n    @computed\r\n    get getProbPair():ProbabilityItem {\r\n        return this.probPair;\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {ProbList} from \"./store/ProbList\";\nimport {StoreProvider} from \"./helpers/store-provider\";\n\nconst probList = new ProbList([\n    {X:0, P:0}\n]);\n\n//@ts-ignore - for debugging\nwindow.probList = probList\n\nReactDOM.render(\n    <StoreProvider value={probList}>\n        <App />\n    </StoreProvider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import {action, computed, observable} from \"mobx\";\r\nimport Probitem from \"./ProbItem\";\r\nimport {geometryData, ProbabilityItem} from \"../constants/interfaces\";\r\nimport { combinations } from \"../helpers/calcMath\";\r\n\r\nexport class ProbList{\r\n    @observable.shallow list: Probitem[] = [];\r\n\r\n    constructor(probItems: ProbabilityItem[]){\r\n        probItems.forEach(this.addProb);\r\n    }\r\n\r\n    @action\r\n    addProb = (prob: ProbabilityItem) => {\r\n        this.list.push(new Probitem(prob.X, prob.P));\r\n    }\r\n\r\n\r\n\r\n    @action\r\n    removeProb = (index:number) => {\r\n        this.list.splice(index, 1);\r\n    }\r\n\r\n    @action\r\n    clearList = () => {\r\n        this.list = []\r\n    }\r\n\r\n    @action\r\n    createDataSequence = (data:geometryData) => {\r\n        for(let i:number = data.m; i < data.n; i++) {\r\n            this.addProb({X:i, P:(combinations(i, data.M) * combinations(data.n - i, data.N - data.M)) / combinations(data.n, data.N)\r\n            })\r\n        }\r\n    }\r\n\r\n    @computed\r\n    get allProballities(): ProbabilityItem[] {\r\n        let tempArr = this.list.sort((a, b) => a.getProbPair.X > b.getProbPair.X? 1:-1)\r\n        return tempArr.map(elem => {\r\n            return {X: elem.getProbPair.X, P: elem.getProbPair.P}\r\n        });\r\n    }\r\n\r\n    @computed\r\n    get checkDuplicates(): boolean {\r\n        let tempArr = this.list.sort((a, b) => a.getProbPair.X > b.getProbPair.X? 1:-1)\r\n        let isDuplicate:any =  tempArr.find((elem,index) => {\r\n            return tempArr.length - 1 !== index && tempArr[index + 1].getProbPair.X === elem.getProbPair.X;\r\n        });\r\n\r\n        return Boolean(isDuplicate)\r\n    }\r\n\r\n    @computed\r\n    get allX(): number[] {\r\n        return this.list.map(elem => {\r\n            return elem.getProbPair.X\r\n        });\r\n    }\r\n\r\n    @computed\r\n    get allP(): number[] {\r\n        return this.list.map(elem => {\r\n            return elem.getProbPair.P\r\n        });\r\n    }\r\n\r\n    @computed\r\n    get allXForFunc():number[]{\r\n        let result:number[] = []\r\n\r\n        result.push((this.list[0].getProbPair.X - 3))\r\n        result.push(...this.list.map(elem => elem.getProbPair.X))\r\n        return result\r\n    }\r\n\r\n    @computed\r\n    get allPForFunc():number[]{\r\n        let result:number[] = []\r\n\r\n        result.push((this.list[0].getProbPair.X - 3))\r\n        result.push(...this.list.map(elem => elem.getProbPair.X))\r\n        return result\r\n    }\r\n}\r\n"],"sourceRoot":""}