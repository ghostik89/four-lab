{"version":3,"sources":["components/Header.tsx","constants/paths.ts","components/ProbalityItem.tsx","helpers/store-provider.ts","helpers/use-store.ts","containers/First/FistExInput.tsx","helpers/calcMath.ts","components/MicroVisualComponents.tsx","containers/First/FirstExResult.tsx","App.tsx","serviceWorker.ts","store/ProbItem.ts","index.tsx","store/ProbList.ts"],"names":["MyPageHeader","ghost","title","extra","key","to","ProbalityItemComponent","probItem","myStyle","deleteProb","useState","X","getProbPair","P","pItem","setPItem","editable","setEditable","Text","Typography","className","value","onChange","disabled","max","min","step","type","onClick","editPropPair","shape","icon","CheckOutlined","EditOutlined","danger","DeleteOutlined","StoreContext","createContext","StoreProvider","Provider","useStore","useContext","FirstExInput","Title","probList","addProbality","addProb","useObserver","PlusOutlined","CalculatorOutlined","list","map","elem","index","removeProb","calcMathWait","arrProbalities","reduce","accumulator","currentValue","normalizeCondition","calcRespFunc","result","reducer","i","length","console","log","slice","push","createDataFunc","funcResp","x","y","forEach","OutFuncRas","arrayOfNums","Paragraph","arrayOfResults","FirstExResult","mnData","labels","allX","datasets","label","fill","lineTension","backgroundColor","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","data","allP","showLine","allProballities","columns","dataIndex","dataSource","checkDuplicates","span","toFixed","calcMathWaitsqr","height","App","path","Boolean","window","location","hostname","match","ProbItem","id","Date","now","this","probPair","observable","action","computed","shallow","probItems","sort","a","b","tempArr","isDuplicate","find","prob","Probitem","splice","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.bfd549e4.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { PageHeader, Button } from 'antd';\r\nimport { Link } from \"react-router-dom\";\r\nimport {firstExInputPath} from \"../constants/paths\";\r\n\r\nexport const MyPageHeader = () => {\r\n    return (\r\n        <PageHeader\r\n            ghost={false}\r\n            title=\"Лабораторная работа №4\"\r\n            extra={[\r\n                <Link key=\"2\" to={firstExInputPath}>\r\n                    <Button>Задание 1</Button>\r\n                </Link>,\r\n                <Button key=\"1\">Задание 2</Button>,\r\n            ]}\r\n        />\r\n    )\r\n}\r\n","export const firstExInputPath:string = '/'\r\nexport const firstExCalcPath:string = '/resultFirst'\r\nexport const secondExInputPath:string = '/second'\r\nexport const secondExCalcPath:string = '/resultSecond'\r\n","import {Button, InputNumber, Space, Tooltip, Typography} from \"antd\";\r\nimport React, {useState} from \"react\";\r\nimport {ProbabilityItem} from \"../constants/interfaces\";\r\nimport ProbItem from \"../store/ProbItem\";\r\nimport { CheckOutlined, EditOutlined, DeleteOutlined } from \"@ant-design/icons\";\r\n\r\ninterface ProbalityItemComponentProps {\r\n    probItem: ProbItem,\r\n    myStyle: string,\r\n    deleteProb: Function\r\n}\r\nexport const ProbalityItemComponent = ({probItem, myStyle, deleteProb}: ProbalityItemComponentProps) => {\r\n    const [pItem, setPItem] = useState<ProbabilityItem>({X: probItem.getProbPair.X, P: probItem.getProbPair.P});\r\n    const [editable, setEditable] = useState<boolean>(true)\r\n    const {Text} = Typography;\r\n    const xChange = (value:any) =>{\r\n        setPItem({...pItem, X:value})\r\n    }\r\n\r\n    const pChange = (value:any) =>{\r\n        setPItem({...pItem, P:value})\r\n    }\r\n\r\n    const saveProbality = () => {\r\n        setEditable(false)\r\n        probItem.editPropPair(pItem.X, pItem.P)\r\n    }\r\n\r\n    return(\r\n        <div className={myStyle}>\r\n            <Space>\r\n                <Text>Координата X:</Text>\r\n                <InputNumber value={pItem.X} onChange={xChange} disabled={!editable}/>\r\n                <Text>Вероятность:</Text>\r\n                <InputNumber max={1} min={0} value={pItem.P} step={0.1} onChange={pChange} disabled={!editable}/>\r\n                {editable? <Tooltip title=\"Сохранить\">\r\n                    <Button type=\"primary\" onClick={saveProbality} shape=\"circle\" icon={<CheckOutlined/>}/>\r\n                </Tooltip>\r\n                    :<>\r\n                        <Tooltip title=\"Редактировать\">\r\n                            <Button type=\"primary\" onClick={() => setEditable(true)} shape=\"circle\" icon={<EditOutlined/>}/>\r\n                        </Tooltip>\r\n                        <Tooltip title=\"Удалить\">\r\n                            <Button type=\"primary\" onClick={() => deleteProb()} danger shape=\"circle\" icon={<DeleteOutlined />} />\r\n                        </Tooltip>\r\n                    </>}\r\n            </Space>\r\n        </div>\r\n    )\r\n}","import { createContext } from \"react\";\r\nimport {ProbList} from '../store/ProbList'\r\n\r\n\r\nexport const StoreContext = createContext<ProbList>({} as ProbList);\r\nexport const StoreProvider = StoreContext.Provider;","import {ProbList} from '../store/ProbList'\r\nimport { useContext } from \"react\";\r\nimport { StoreContext } from \"./store-provider\";\r\n\r\nexport const useStore = (): ProbList => useContext(StoreContext);","import React from \"react\";\r\nimport {Button, Divider, Space, Tooltip,  Typography} from 'antd';\r\nimport { PlusOutlined, CalculatorOutlined } from '@ant-design/icons';\r\nimport \"./firstexinput.css\"\r\nimport {ProbalityItemComponent} from \"../../components/ProbalityItem\";\r\nimport {useObserver} from \"mobx-react-lite\";\r\nimport {useStore} from \"../../helpers/use-store\";\r\nimport {Link} from \"react-router-dom\";\r\nimport {firstExCalcPath} from \"../../constants/paths\";\r\n\r\nexport const FirstExInput = () => {\r\n    const { Title, Text } = Typography;\r\n    const probList = useStore();\r\n\r\n    const addProbality = () => {\r\n        probList.addProb({X:0, P:0})\r\n    }\r\n\r\n    return useObserver ( () => (\r\n        <div className={\"containerStyle\"}>\r\n           <Title>Введите данные для рассчета</Title>\r\n           <Divider/>\r\n           <Space>\r\n               <Text>Введите количество экспериментов</Text>\r\n               <Tooltip title=\"Добавить эксперимент\">\r\n                   <Button type=\"primary\" shape=\"circle\" icon={<PlusOutlined />} onClick={addProbality}/>\r\n               </Tooltip>\r\n               <Tooltip title=\"Рассчитать значения\">\r\n                   <Link to={firstExCalcPath}>\r\n                       <Button type=\"primary\" shape=\"circle\" icon={<CalculatorOutlined />}/>\r\n                   </Link>\r\n                </Tooltip>\r\n           </Space>\r\n            {probList.list.map((elem, index) => (\r\n                <ProbalityItemComponent\r\n                    probItem={elem}\r\n                    myStyle={\"constainerProbalities_item\"}\r\n                    deleteProb={() => {probList.removeProb(index)}}\r\n                />\r\n            ))}\r\n       </div>\r\n       ))\r\n}","import {Point, ProbabilityItem} from \"../constants/interfaces\";\r\n\r\nexport function calcMathWait (arrProbalities:Array<ProbabilityItem>):number {\r\n    function reducer (accumulator:number, currentValue:ProbabilityItem):number{\r\n        return accumulator + currentValue.X * currentValue.P\r\n    }\r\n    return arrProbalities.reduce(reducer, 0);\r\n}\r\n\r\nfunction calcMathWaitsqr(arrProbalities:Array<ProbabilityItem>):number {\r\n    function reducer (accumulator:number, currentValue:ProbabilityItem):number{\r\n        return accumulator + currentValue.X * currentValue.X * currentValue.P\r\n    }\r\n    return arrProbalities.reduce(reducer, 0);\r\n}\r\n\r\nexport function calcMathDispertion(arrProbalities:Array<ProbabilityItem>):number{\r\n    return calcMathWaitsqr(arrProbalities) - calcMathWait(arrProbalities)*calcMathWait(arrProbalities);\r\n}\r\n\r\nexport function normalizeCondition(arrProbalities:Array<ProbabilityItem>):number {\r\n    function reducer (accumulator:number, currentValue:ProbabilityItem):number{\r\n        return accumulator +  currentValue.P\r\n    }\r\n    return arrProbalities.reduce(reducer,0)\r\n}\r\n\r\nexport function calcRespFunc(arrProbalities:Array<ProbabilityItem>):Array<number> {\r\n   let result:Array<number> = []\r\n    function reducer (accumulator:number, currentValue:ProbabilityItem):number{\r\n        return accumulator + currentValue.P\r\n    }\r\n    for(let i:number = 0; i < arrProbalities.length; i++){\r\n        console.log(arrProbalities.slice(0, i+1).reduce(reducer,0))\r\n        result.push(arrProbalities.slice(0, i+1).reduce(reducer,0))\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function createDataFunc(arrProbalities:Array<ProbabilityItem>):Point[] {\r\n    let funcResp:number[] = calcRespFunc(arrProbalities)\r\n    let result:Point[] = [];\r\n    result.push({x:arrProbalities[0].X - 3,y:0})\r\n    funcResp.forEach((elem, index) =>{\r\n        if(index === 0){\r\n            result.push({x: arrProbalities[index].X, y:0})\r\n            if (arrProbalities.length > 1)\r\n                result.push({x: arrProbalities[index+1].X, y:0})\r\n        }\r\n        else if(index === arrProbalities.length-1) {\r\n            result.push({x: arrProbalities[index].X, y: 1})\r\n            result.push({x: arrProbalities[index].X + 3, y: 1})\r\n        }\r\n        else {\r\n            result.push({x: arrProbalities[index].X, y:elem})\r\n            result.push({x: arrProbalities[index+1].X, y:elem})\r\n        }\r\n    })\r\n\r\n    if (arrProbalities.length === 1){\r\n        result.push({x: arrProbalities[0].X, y: 1})\r\n        result.push({x: arrProbalities[0].X + 3, y: 1})\r\n    }\r\n\r\n    return result\r\n}","import React from \"react\";\r\nimport {ProbabilityItem} from \"../constants/interfaces\";\r\nimport {Typography} from \"antd\";\r\nimport {calcRespFunc} from \"../helpers/calcMath\";\r\n\r\ninterface outFuncRas{\r\n    arrayOfNums: Array<ProbabilityItem>\r\n}\r\n\r\nexport const OutFuncRas = ({arrayOfNums}:outFuncRas) => {\r\n    const {Paragraph} = Typography\r\n    let arrayOfResults:Array<number> = calcRespFunc(arrayOfNums);\r\n\r\n    return(\r\n        <div>\r\n            {arrayOfResults.map((elem, index) => (\r\n                <div key={elem}>\r\n                {index === 0? <Paragraph>{`0, при x≤${arrayOfNums[index].X}`}</Paragraph>:''}\r\n                {index > 0 && index !== arrayOfResults.length - 1? <Paragraph>{`${elem}, ${arrayOfNums[index - 1].X} < x ≤ ${arrayOfNums[index].X}`}</Paragraph>:''}\r\n                {index === arrayOfResults.length - 1? <Paragraph>{`1, при x > ${arrayOfNums[index].X}`}</Paragraph>:''}\r\n                </div>\r\n            ))}\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport {useObserver} from \"mobx-react-lite\";\r\nimport {useStore} from \"../../helpers/use-store\";\r\nimport {Card, Divider, Table, Typography, Row, Col, Button} from \"antd\";\r\nimport {Line, Scatter} from 'react-chartjs-2';\r\nimport './firstexinput.css'\r\nimport {calcMathDispertion, calcMathWait, createDataFunc, normalizeCondition} from \"../../helpers/calcMath\";\r\nimport {OutFuncRas} from \"../../components/MicroVisualComponents\";\r\nimport {Link} from \"react-router-dom\";\r\nimport {firstExInputPath} from \"../../constants/paths\";\r\n\r\n\r\nexport const FirstExResult = () => {\r\n    const probList = useStore()\r\n    const mnData = {\r\n        labels: probList.allX,\r\n        datasets: [\r\n            {\r\n                label: 'Многоугольник распределения',\r\n                fill: false,\r\n                lineTension: 0.1,\r\n                backgroundColor: 'rgba(75,192,192,0.4)',\r\n                borderColor: 'rgba(75,192,192,1)',\r\n                borderCapStyle: 'butt',\r\n                borderDash: [],\r\n                borderDashOffset: 0.0,\r\n                borderJoinStyle: 'miter',\r\n                pointBorderColor: 'rgba(75,192,192,1)',\r\n                pointBackgroundColor: '#fff',\r\n                pointBorderWidth: 1,\r\n                pointHoverRadius: 5,\r\n                pointHoverBackgroundColor: 'rgba(75,192,192,1)',\r\n                pointHoverBorderColor: '#fff',\r\n                pointHoverBorderWidth: 2,\r\n                pointRadius: 1,\r\n                pointHitRadius: 10,\r\n                data: probList.allP\r\n            }\r\n        ]\r\n    };\r\n    const data = {\r\n        labels: [\r\n            \"Scatter\"\r\n        ],\r\n            datasets: [\r\n            {\r\n                label: \"Функция распределения\",\r\n                fill: false,\r\n                showLine: true,\r\n                lineTension: 0.1,\r\n                borderColor: 'rgb(93,192,75)',\r\n                backgroundColor: \"#FFF\",\r\n                pointBorderColor: \"#FFF\",\r\n                pointBackgroundColor: \"#FFF\",\r\n                pointBorderWidth: 1,\r\n                pointHoverRadius: 5,\r\n                pointHoverBackgroundColor: \"#FFF\",\r\n                pointHoverBorderColor: \"rgb(93,192,75)\",\r\n                pointHoverBorderWidth: 2,\r\n                pointRadius: 1,\r\n                pointHitRadius: 10,\r\n                data: createDataFunc(probList.allProballities),\r\n            }\r\n        ]\r\n    };\r\n    const {Title, Text, Paragraph} = Typography;\r\n    const columns = [{\r\n            title:'X',\r\n            dataIndex:'X',\r\n            key: 'id'\r\n        },{\r\n            title:'P',\r\n            dataIndex:'P',\r\n            key: 'id'\r\n        }]\r\n\r\n    return useObserver(() =>(\r\n        <div className={\"containerStyle\"}>\r\n            <Title>Рассчет первого задания.</Title>\r\n            <Divider/>\r\n            <Card title={\"Значения экспериментов\"} className={\"firstExResult_card\"}>\r\n                <Table dataSource={probList.allProballities} columns={columns}/>\r\n                <Divider/>\r\n                <Paragraph>Условие нормировки:</Paragraph>\r\n                <Text>{`Σpi = ${normalizeCondition(probList.allProballities)}`}</Text>\r\n                {normalizeCondition(probList.allProballities) !== 1?\r\n                <div>\r\n                    <Text>Условие нормировки не выполнено! Введите другие значения!</Text>\r\n                    <Link to={firstExInputPath}>\r\n                        <Button type={\"link\"}>Исправить значения</Button>\r\n                    </Link>\r\n                </div>:''}\r\n                {probList.checkDuplicates?\r\n                    <div>\r\n                        <Text>Обнаружены дупликаты координат!</Text>\r\n                        <Link to={firstExInputPath}>\r\n                            <Button type={\"link\"}>Исправить значения</Button>\r\n                        </Link>\r\n                    </div>:''}\r\n            </Card>\r\n            {normalizeCondition(probList.allProballities) === 1 || probList.checkDuplicates?\r\n                <>\r\n                    <Row>\r\n                        <Col span={8}>\r\n                            <Card title={\"Функция распределения\"} className={\"firstExResult_card\"}>\r\n                                <Text>F(x) = </Text>\r\n                                <OutFuncRas arrayOfNums={probList.allProballities}/>\r\n                            </Card>\r\n                        </Col>\r\n                        <Col span={8}>\r\n                            <Card title={\"Математическое ожидание\"} className={\"firstExResult_card\"}>\r\n                                <Text>{`M(x) = Σpi * xi = ${calcMathWait(probList.allProballities).toFixed(4)}`}</Text>\r\n                            </Card>\r\n                        </Col>\r\n                        <Col span={7} className={\"firstExResult_card\"}>\r\n                            <Card title={\"Дисперсия\"}>\r\n                                <Text>{`D(x) = M(X^2) - M(X)^2 = ${calcMathDispertion(probList.allProballities).toFixed(4)}`}</Text>\r\n                            </Card>\r\n                        </Col>\r\n                    </Row>\r\n                    <Card title={\"Функция распределения\"} className={\"firstExResult_card_graph\"}>\r\n                        <Scatter data={data} height={100}/>\r\n                    </Card>\r\n                    <Card title={\"Многоугольник распределения\"} className={\"firstExResult_card_graph\"}>\r\n                        <Line  data={mnData} height={100}/>\r\n                    </Card>\r\n                </>:''}\r\n        </div>\r\n    ))\r\n}","import React from 'react';\nimport 'antd/dist/antd.css';\nimport {Layout} from 'antd';\nimport {MyPageHeader} from \"./components/Header\";\nimport {\n    HashRouter as Router,\n    Switch,\n    Route\n} from \"react-router-dom\";\nimport {FirstExInput} from './containers/First/FistExInput'\nimport \"./App.css\"\nimport {firstExCalcPath, firstExInputPath} from \"./constants/paths\";\nimport {FirstExResult} from \"./containers/First/FirstExResult\";\n\nfunction App() {\n  return (\n      <Layout className={\"appLayout\"}>\n        <Router>\n            <MyPageHeader/>\n            <Switch>\n                <Route path={firstExCalcPath}>\n                    <FirstExResult/>\n                </Route>\n                <Route path={firstExInputPath}>\n                    <FirstExInput/>\n                </Route>\n            </Switch>\n        </Router>\n      </Layout>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { observable, action, computed } from \"mobx\";\r\nimport {ProbabilityItem} from \"../constants/interfaces\";\r\n\r\n\r\nexport default class ProbItem{\r\n    id = Date.now();\r\n\r\n    @observable probPair: ProbabilityItem = {X: 0, P: 0};\r\n\r\n    constructor(X:number, P:number){\r\n        this.probPair = {X: X, P: P};\r\n    }\r\n\r\n    @action\r\n    editPropPair = (X: number, P:number) =>{\r\n        this.probPair = {X: X, P: P};\r\n    }\r\n\r\n    @computed\r\n    get getProbPair():ProbabilityItem {\r\n        return this.probPair;\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {ProbList} from \"./store/ProbList\";\nimport {StoreProvider} from \"./helpers/store-provider\";\n\nconst probList = new ProbList([\n    {X:0, P:0}\n]);\n\n//@ts-ignore - for debugging\nwindow.probList = probList\n\nReactDOM.render(\n    <StoreProvider value={probList}>\n        <App />\n    </StoreProvider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import {action, computed, observable} from \"mobx\";\r\nimport Probitem from \"./ProbItem\";\r\nimport {ProbabilityItem} from \"../constants/interfaces\";\r\n\r\nexport class ProbList{\r\n    @observable.shallow list: Probitem[] = [];\r\n\r\n    constructor(probItems: ProbabilityItem[]){\r\n        probItems.forEach(this.addProb);\r\n    }\r\n\r\n    @action\r\n    addProb = (prob: ProbabilityItem) => {\r\n        this.list.push(new Probitem(prob.X, prob.P));\r\n    }\r\n\r\n\r\n\r\n    @action\r\n    removeProb = (index:number) => {\r\n        this.list.splice(index, 1);\r\n    }\r\n\r\n\r\n    @computed\r\n    get allProballities(): ProbabilityItem[] {\r\n        let tempArr = this.list.sort((a, b) => a.getProbPair.X > b.getProbPair.X? 1:-1)\r\n        return tempArr.map(elem => {\r\n            return {X: elem.getProbPair.X, P: elem.getProbPair.P}\r\n        });\r\n    }\r\n\r\n    @computed\r\n    get checkDuplicates(): boolean {\r\n        let tempArr = this.list.sort((a, b) => a.getProbPair.X > b.getProbPair.X? 1:-1)\r\n        let isDuplicate:any =  tempArr.find((elem,index) => {\r\n            return tempArr.length - 1 !== index && tempArr[index + 1].getProbPair.X === elem.getProbPair.X;\r\n        });\r\n\r\n        return Boolean(isDuplicate)\r\n    }\r\n\r\n    @computed\r\n    get allX(): number[] {\r\n        return this.list.map(elem => {\r\n            return elem.getProbPair.X\r\n        });\r\n    }\r\n\r\n    @computed\r\n    get allP(): number[] {\r\n        return this.list.map(elem => {\r\n            return elem.getProbPair.P\r\n        });\r\n    }\r\n\r\n    @computed\r\n    get allXForFunc():number[]{\r\n        let result:number[] = []\r\n\r\n        result.push((this.list[0].getProbPair.X - 3))\r\n        result.push(...this.list.map(elem => elem.getProbPair.X))\r\n        return result\r\n    }\r\n\r\n    @computed\r\n    get allPForFunc():number[]{\r\n        let result:number[] = []\r\n\r\n        result.push((this.list[0].getProbPair.X - 3))\r\n        result.push(...this.list.map(elem => elem.getProbPair.X))\r\n        return result\r\n    }\r\n}\r\n"],"sourceRoot":""}